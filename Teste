#include <WiFi.h> // Biblioteca para conectar ao WiFi
#include <PubSubClient.h> // Biblioteca para comunicação MQTT
#include <WiFiClientSecure.h> // Biblioteca para comunicação segura via WiFi
#include <HTTPClient.h> // Biblioteca para fazer requisições HTTP
#include <Update.h> // Biblioteca para atualizar o firmware

// Credenciais da rede WiFi
const char* ssid = "INTELBRAS - JOAO";
const char* password = "jps510123";

// Credenciais do servidor MQTT
const char* mqtt_server = "18dd6a02029d4d7781deed1e012e3fc2.s1.eu.hivemq.cloud";
const char* mqtt_username = "pedroteste";
const char* mqtt_password = "Pedro510123.";
const int mqtt_port = 8883;

// URL base para download do firmware
const char* firmware_base_url = "https://raw.githubusercontent.com/PedroKutski/TESTES/main/";

// Pino do LED
const int ledPin = 2;

// Objetos para comunicação segura e MQTT
WiFiClientSecure espClient;
PubSubClient mqttClient(espClient);

// Declaração antecipada das funções
void reconnectToMQTT();
void mqttCallback(char* topic, byte* payload, unsigned int length);
void blinkLED(int times, int delayTime);
void downloadFirmware(const String& filename);

void setup() {
  Serial.begin(9600); // Inicializa a comunicação serial
  pinMode(ledPin, OUTPUT); // Define o pino do LED como saída
  WiFi.begin(ssid, password); // Conecta ao WiFi
  while (WiFi.status() != WL_CONNECTED) delay(500); // Espera até conectar
  espClient.setInsecure(); // Configura a conexão segura como insegura (sem verificação de certificado)
  mqttClient.setServer(mqtt_server, mqtt_port); // Configura o servidor MQTT
  mqttClient.setCallback(mqttCallback); // Define a função de callback para o MQTT
}

void loop() {
  if (!mqttClient.connected()) reconnectToMQTT(); // Reconecta ao MQTT se desconectado
  mqttClient.loop(); // Mantém a conexão MQTT ativa
}

void reconnectToMQTT() {
  while (!mqttClient.connected()) {
    if (mqttClient.connect("ESP32Client_teste", mqtt_username, mqtt_password)) {
      mqttClient.subscribe("firmware_git"); // Inscreve no tópico "firmware_git"
      mqttClient.subscribe("teste"); // Inscreve no tópico "teste"
    } else {
      delay(5000); // Espera 5 segundos antes de tentar novamente
    }
  }
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String message = String((char*)payload).substring(0, length); // Converte o payload para string
  if (String(topic) == "firmware_git") {
    blinkLED(2, 100); // Pisca o LED 2 vezes
    downloadFirmware(message); // Faz o download do firmware
  } else if (String(topic) == "teste") {
    if (message == "on2") {
      digitalWrite(ledPin, HIGH); // Liga o LED
    } else if (message == "off2") {
      digitalWrite(ledPin, LOW); // Desliga o LED
    }
  }
}

void blinkLED(int times, int delayTime) {
  for (int i = 0; i < times; i++) {
    digitalWrite(ledPin, HIGH); // Liga o LED
    delay(delayTime); // Espera
    digitalWrite(ledPin, LOW); // Desliga o LED
    delay(delayTime); // Espera
  }
}

void downloadFirmware(const String& filename) {
  String firmwareUrl = firmware_base_url + filename; // Monta a URL do firmware
  WiFiClientSecure client;
  client.setInsecure(); // Configura a conexão segura como insegura
  HTTPClient http;
  http.begin(client, firmwareUrl); // Inicia a requisição HTTP
  int httpCode = http.GET(); // Faz a requisição GET

  if (httpCode == HTTP_CODE_OK) {
    int contentLength = http.getSize(); // Obtém o tamanho do conteúdo
    if (contentLength > 0 && Update.begin(contentLength)) {
      size_t written = 0;
      WiFiClient* stream = http.getStreamPtr();
      uint8_t buff[128] = { 0 };
      unsigned long lastBlink = millis();
      while (http.connected() && (written < contentLength)) {
        size_t size = stream->available();
        if (size) {
          int c = stream->readBytes(buff, ((size > sizeof(buff)) ? sizeof(buff) : size));
          written += Update.write(buff, c);
        }
        if (millis() - lastBlink > 500) { // Pisca o LED a cada 500ms
          digitalWrite(ledPin, !digitalRead(ledPin));
          lastBlink = millis();
        }
      }
      if (written == contentLength && Update.end() && Update.isFinished()) {
        blinkLED(5, 150); // Pisca o LED 5 vezes
        ESP.restart(); // Reinicia o ESP
      }
    }
  }
  http.end(); // Finaliza a requisição HTTP
}
